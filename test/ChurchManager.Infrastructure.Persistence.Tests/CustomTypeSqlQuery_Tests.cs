using System;
using System.Data;
using System.Threading.Tasks;
using ChurchManager.Infrastructure.Persistence.Contexts;
using ChurchManager.Infrastructure.Persistence.Extensions;
using JetBrains.Annotations;
using Microsoft.EntityFrameworkCore;
using Xunit;
using System.Data.SqlClient;
using ChurchManager.Infrastructure.Persistence.Tests.Helpers;

namespace ChurchManager.Infrastructure.Persistence.Tests
{
    public class CustomTypeSqlQuery_Tests
    {
        private readonly DbContextOptions<ChurchManagerDbContext> _options =
            new DbContextOptionsBuilder<ChurchManagerDbContext>()
                .UseNpgsql("Server=localhost;Port=5432;Database=churchmanager_db;User Id=admin;password=P455word1;")
                //.UseLoggerFactory(_loggerFactory) //Optional, this logs SQL generated by EF Core to the Console
                .Options;


        [Fact]
        public async Task Should_map_sql_query_to_custom_type()
        {
            using var dbContext = new ChurchManagerDbContext(_options, new LocalTenantProvider());

            var sql =
                "SELECT" +
                "   EXTRACT (YEAR FROM \"AttendanceDate\") as year," +
                "   EXTRACT (MONTH FROM \"AttendanceDate\") as month," +
                "   G.\"Name\" as group," +
                "   COUNT (\"AttendanceCount\") as attendance," +
                "   COUNT (\"FirstTimerCount\") as firsttimers," +
                "   COUNT (\"NewConvertCount\") as newconverts," +
                "   COUNT (\"ReceivedHolySpiritCount\") as holyspirit" +
                " FROM " +
                "    \"GroupAttendance\"" +
                " JOIN \"Group\" G on G.\"Id\" = \"GroupAttendance\".\"GroupId\"" +
                " WHERE \"AttendanceDate\" BETWEEN @start AND @end " +
                " GROUP BY " +
                "   ROLLUP (" +
                "        EXTRACT (YEAR FROM \"AttendanceDate\")," +
                "       EXTRACT (MONTH FROM \"AttendanceDate\")," +
                "       G.\"Name\"" +
                "    )" +
                " ORDER BY 1 DESC, 2 ASC, 3 ASC; ";

            var start = new SqlParameter("@start", SqlDbType.Date)
            {
                Value = new DateTime(2020, 10, 29)
            };
            var end = new SqlParameter("@end", SqlDbType.Date)
            {
                Value = new DateTime(2021, 03, 16)
            };

            var myList = await dbContext.Database.SqlQuery<GroupAttendanceRollUp>(sql, start, end).ToListAsync();
        }
    }

    public class GroupAttendanceRollUp
    {
        public double? Year { get; set; }
        public double? Month { get; set; }
        [CanBeNull] public string Group { get; set; }
        public Int64 Attendance { get; set; }
    }
}

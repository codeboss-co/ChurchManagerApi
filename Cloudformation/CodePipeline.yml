AWSTemplateFormatVersion: 2010-09-09
Description: The CloudFormation template for the CodePipeline.

Parameters:
  EnvironmentName:
    Type: String
    Default: prod
    AllowedValues:
      - qa      
      - prod
    Description: "A friendly environment name that will be used for namespacing all cluster resources. Example: staging, qa, or production"
  ProjectName:
    Type: String
    Default: churchmanager-ui
    Description: Must be LOWERCASE - Will also be used as the container name in ECS.
  GithubUserName:
    Type: String
    Default: codeboss-co
  GithubRepo:
    Type: String
    Default: ChurchManagerUI
  GithubBranch:
    Type: String
    Default: master
  GithubOAuthToken:
    Type: String
    Default: <GITHUB ACCESS TOKEN>
  ContainerPort:
    Type: Number
    Default: 80

Resources:

  # Create an ECR Repository to store docker images
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Join ['-', [!Ref EnvironmentName, !Ref ProjectName, 'ecr-repository']]

  # Create an S3 Bucket to store build artifacts
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ['-', [!Ref EnvironmentName, !Ref ProjectName, 's3bucket']]

  # Create Access Role for CodePipeLine
  CodePipeLineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'

  # Create Access Role for CodeBuild
  CodeBuildExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  # Create Access Role for Cloudformation
  CloudformationExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'

  # Create the BuildProject with required Build information
  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties: 
      Artifacts: 
        Type: CODEPIPELINE
      Environment: 
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: True
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: ECR_REPOSITORY_URI
            Value: !Join [ ".", [ !Ref "AWS::AccountId", "dkr.ecr", !Ref "AWS::Region", !Join [ "/", [ "amazonaws.com", !Ref "ECRRepository" ] ] ] ]
          - Name: ENV_PROJECT_NAME
            Value: !Ref ProjectName
      Name: !Join ['-', [!Ref EnvironmentName, !Ref ProjectName, 'BuildProject']]
      ServiceRole: !Ref CodeBuildExecutionRole
      Source:
        Type: CODEPIPELINE
        # This file (buildspec.yml In Source code) contains commands to Create and Push a docker image to the ECR_REPOSITORY_URI
        BuildSpec: buildspec.yml

  # Create CodePipeline with 3 Stages (Source, Build and Deploy)
  CodePipeLine:
    Type: AWS::CodePipeline::Pipeline
    DependsOn: S3Bucket
    Properties: 
      ArtifactStore: 
        Location: !Join ['-', [!Ref EnvironmentName, !Ref ProjectName, 's3bucket']]
        Type: S3
      Name: !Join ['-', [!Ref EnvironmentName, !Ref ProjectName, 'CodePipeLine']]
      RestartExecutionOnUpdate: False
      RoleArn: 
        Fn::GetAtt: [ CodePipeLineExecutionRole, Arn ]
        
      Stages:

        # Download source code from Github Repo to source-output-artifacts path in S3 Bucket
        - Name: Source
          Actions: 
          - Name: Source
            ActionTypeId: 
              Category: Source
              Owner: ThirdParty
              Provider: GitHub
              Version: 1
            Configuration:
              Repo: !Ref GithubRepo
              Branch: !Ref GithubBranch
              Owner: !Ref GithubUserName
              OAuthToken: !Ref GithubOAuthToken
            RunOrder: 1
            OutputArtifacts:
              - Name: source-output-artifacts
        
        # Build the project using the BuildProject and Output build artifacts to build-output-artifacts path in S3 Bucket
        - Name: Build
          Actions:
          - Name: Build
            ActionTypeId:
              Category: Build
              Owner: AWS
              Version: 1
              Provider: CodeBuild
            OutputArtifacts:
              - Name: build-output-artifacts
            InputArtifacts:
              - Name: source-output-artifacts
            Configuration:
                ProjectName: !Ref BuildProject
            RunOrder: 1

        # Deploy the project to ECS
        - Name: Deploy
          Actions:
            - Name: Deploy
              RunOrder: 1
              InputArtifacts:
                - Name: build-output-artifacts
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: ECS
              Configuration:
                ClusterName:
                  Fn::ImportValue: !Sub ${EnvironmentName}:ClusterName
                ServiceName: !Join ['-', [!Ref EnvironmentName, !Ref ProjectName, service]]
                FileName: imageDetail.json


Outputs:
  PipelineUrl:
    Value: !Sub https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${CodePipeLine}                